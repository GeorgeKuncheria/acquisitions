name: Tests

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          NODE_OPTIONS: --experimental-vm-modules
          DATABASE_URL: postgresql://test:test@localhost:5432/testdb
        continue-on-error: true
        id: tests
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30
      
      - name: Generate test summary
        if: always()
        run: |
          if [ -f coverage/lcov-report/index.html ]; then
            echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract coverage percentages from the HTML report if available
            if [ -f coverage/coverage-summary.json ]; then
              echo "### Coverage Results" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📊 Full coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Test Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ "${{ steps.tests.outcome }}" == "success" ]; then
              echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Some tests failed. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: Annotate test failures
        if: steps.tests.outcome == 'failure'
        run: |
          echo "::error::Tests failed. Please check the test output above and fix the failing tests before merging."
          exit 1
      
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let coverageComment = '## 🧪 Test Results\n\n';
            
            if ('${{ steps.tests.outcome }}' === 'success') {
              coverageComment += '✅ All tests passed!\n\n';
            } else {
              coverageComment += '❌ Some tests failed. Please check the workflow logs for details.\n\n';
            }
            
            // Try to read coverage summary
            try {
              if (fs.existsSync('coverage/coverage-summary.json')) {
                const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
                const total = coverage.total;
                
                coverageComment += '### Coverage Summary\n\n';
                coverageComment += '| Metric | Percentage | Covered/Total |\n';
                coverageComment += '|--------|------------|---------------|\n';
                coverageComment += `| Lines | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |\n`;
                coverageComment += `| Functions | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |\n`;
                coverageComment += `| Branches | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |\n`;
                coverageComment += `| Statements | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |\n`;
              }
            } catch (e) {
              coverageComment += 'Coverage information not available.\n';
            }
            
            coverageComment += '\n📊 Detailed coverage reports are available in the workflow artifacts.';
            
            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('🧪 Test Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: coverageComment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageComment
              });
            }